// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DTOkyc
@_exported import DTOkyc
import DeveloperToolsSupport
import Foundation
import QuartzCore
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class DTException : ObjectiveC.NSObject, Swift.Error {
  @objc public func getErrorCode() -> Foundation.NSNumber?
  @objc public func getErrorMessage() -> Foundation.NSString?
  @objc deinit
}
public enum ErrorCode : Swift.Int {
  case INVALID_INPUT, INIT_NOT_CALLED, USER_CANCELLED, INTERNAL_ERROR, INTERNET_NOT_AVAILABLE, SERVER_ERROR, ERROR_UIDAI, AUTHENTICATION_FAILED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ErrorMessage : Swift.String {
  case INVALID_INPUT
  case INIT_NOT_CALLED
  case USER_CANCELLED
  case INTERNAL_ERROR
  case SERVER_ERROR
  case INTERNET_NOT_AVAILABLE
  case ERROR_UIDAI
  case AUTHENTICATION_FAILED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DTOkycSDK : ObjectiveC.NSObject {
  @objc public static func initialize(clientId: Swift.String, clientSecret: Swift.String, environment: DTOkyc.DTEnvironment) throws
  @objc public static func initialize(token: Swift.String, environment: DTOkyc.DTEnvironment) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DTEnvironment : Swift.Int {
  case PRODUCTION
  case UAT
  case STAGE
  case DEV
}
extension DTOkyc.DTEnvironment : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: DTOkyc.DTEnvironment.RawValue)
  public var rawValue: DTOkyc.DTEnvironment.RawValue {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class DTOkycVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var environment: DTOkyc.DTEnvironment!
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, clientRefId: Swift.String, completionHandler: @escaping (DTOkyc.DTException?, [Swift.String : Any]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DTOkyc.ErrorCode : Swift.Equatable {}
extension DTOkyc.ErrorCode : Swift.Hashable {}
extension DTOkyc.ErrorCode : Swift.RawRepresentable {}
extension DTOkyc.ErrorMessage : Swift.Equatable {}
extension DTOkyc.ErrorMessage : Swift.Hashable {}
extension DTOkyc.ErrorMessage : Swift.RawRepresentable {}
extension DTOkyc.DTEnvironment : Swift.Equatable {}
extension DTOkyc.DTEnvironment : Swift.Hashable {}
